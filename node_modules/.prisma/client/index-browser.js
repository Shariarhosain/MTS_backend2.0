
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  date: 'date',
  project_name: 'project_name',
  ops_status: 'ops_status',
  sales_comments: 'sales_comments',
  opsleader_comments: 'opsleader_comments',
  sheet_link: 'sheet_link',
  Assigned_date: 'Assigned_date',
  ordered_by: 'ordered_by',
  deli_last_date: 'deli_last_date',
  status: 'status',
  order_amount: 'order_amount',
  after_fiverr_amount: 'after_fiverr_amount',
  bonus: 'bonus',
  after_Fiverr_bonus: 'after_Fiverr_bonus',
  rating: 'rating',
  is_delivered: 'is_delivered',
  delivery_date: 'delivery_date',
  revision: 'revision',
  extension: 'extension',
  department_id: 'department_id',
  project_requirements: 'project_requirements',
  profile_id: 'profile_id',
  team_id: 'team_id',
  update_at: 'update_at'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  team_name: 'team_name',
  department_id: 'department_id',
  team_target: 'team_target',
  team_achieve: 'team_achieve',
  team_cancel: 'team_cancel',
  total_carry: 'total_carry'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  department_name: 'department_name',
  department_target: 'department_target',
  department_achieve: 'department_achieve',
  department_cancel: 'department_cancel',
  department_special_order: 'department_special_order',
  department_designation: 'department_designation',
  project_requirements: 'project_requirements',
  total_carry: 'total_carry'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  created_date: 'created_date',
  profile_name: 'profile_name',
  order_amount: 'order_amount',
  bonus_amount: 'bonus_amount',
  order_count: 'order_count',
  rank: 'rank',
  cancel_count: 'cancel_count',
  complete_count: 'complete_count',
  no_rating: 'no_rating',
  profile_target: 'profile_target',
  department_id: 'department_id',
  repeat_order: 'repeat_order',
  keywords: 'keywords',
  total_rating: 'total_rating'
};

exports.Prisma.Team_memberScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  number: 'number',
  permanent_address: 'permanent_address',
  present_address: 'present_address',
  gender: 'gender',
  blood_group: 'blood_group',
  relationship: 'relationship',
  guardian_relation: 'guardian_relation',
  guardian_number: 'guardian_number',
  guardian_address: 'guardian_address',
  team_id: 'team_id',
  religion: 'religion',
  education: 'education',
  dp: 'dp',
  role: 'role',
  target: 'target',
  rewards: 'rewards',
  rating: 'rating',
  account_status: 'account_status',
  password: 'password',
  designation: 'designation',
  uid: 'uid'
};

exports.Prisma.Member_targetScalarFieldEnum = {
  id: 'id',
  team_member_id: 'team_member_id'
};

exports.Prisma.RevisionScalarFieldEnum = {
  id: 'id',
  project_id: 'project_id',
  revision_date: 'revision_date',
  revision_comments: 'revision_comments',
  delivery_date: 'delivery_date',
  metting_link: 'metting_link',
  metting_date: 'metting_date'
};

exports.Prisma.Today_taskScalarFieldEnum = {
  id: 'id',
  project_id: 'project_id',
  client_name: 'client_name',
  expected_finish_time: 'expected_finish_time',
  team_member_id: 'team_member_id',
  ops_status: 'ops_status',
  team_id: 'team_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  project: 'project',
  team: 'team',
  department: 'department',
  profile: 'profile',
  team_member: 'team_member',
  member_target: 'member_target',
  revision: 'revision',
  today_task: 'today_task'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
