const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function emitProjectMoneyMetrics(io) {
Â  const now = new Date();

Â  const startOfCurrentMonth = new Date(now.getFullYear(), now.getMonth(), 1);
Â  const endOfCurrentMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);

Â  try {
Â  Â  const projects = await prisma.project.findMany({
Â  Â  Â  where: {
Â  Â  Â  Â  OR: [
Â  Â  Â  Â  Â  { date: { lte: endOfCurrentMonth } }, // Project creation date
Â  Â  Â  Â  Â  { delivery_date: { lte: endOfCurrentMonth } }, // Project delivery date
Â  Â  Â  Â  ],
Â  Â  Â  },
Â  Â  });

Â  Â  // Initialize money totals
Â  Â  let total_operations = 0;
Â  Â  let total_sales = 0;
Â  Â  let total_assign = 0;
Â  Â  let need_to_assign = 0;
Â  Â  let carry_operation = 0; // Carry over for operations (old or current projects, not delivered)
Â  Â  let carry_pm = 0; // Carry over for PM (old projects, not yet assigned)
Â  Â  let cancelled = 0;
let total_carry = 0;

Â  Â  projects.forEach(p => {
Â  Â  Â  const amt = parseInt(p.after_fiverr_amount) || 0;

Â  Â  Â  if (p.status === 'cancelled') {
Â  Â  Â  Â  cancelled += amt;
Â  Â  Â  Â  return; // Exit this loop iteration early
Â  Â  Â  }

Â  Â  Â  // Determine date contexts
Â  Â  Â  const isThisMonthDelivery = p.delivery_date && p.delivery_date >= startOfCurrentMonth && p.delivery_date <= endOfCurrentMonth;
Â  Â  Â  const isThisMonthProject = p.date && p.date >= startOfCurrentMonth && p.date <= endOfCurrentMonth;
Â  Â  Â  const isPastProject = p.date && p.date < startOfCurrentMonth;

Â  Â  Â  // total_operations: delivered this month
Â  Â  Â  if (p.is_delivered && isThisMonthDelivery) total_operations += amt;

Â  Â  Â  // total_sales: created this month
Â  Â  Â  if (isThisMonthProject) total_sales += amt;

Â  Â  Â  // total_assign: assigned, not delivered (regardless of creation/delivery date relative to this month, as long as queried)
Â  Â  Â  if (p.Assigned_date && !p.is_delivered) total_assign += amt;

Â  Â  Â  // need_to_assign: not assigned (Assigned_date is null), and not cancelled
Â  Â  Â  if (!p.Assigned_date) need_to_assign += amt;

Â  Â  Â  // carry_operation: old or current project AND not delivered (potentially in revision or waiting for delivery)
         // Note: The original code comment said "revision status", but the logic is !p.is_delivered. Let's stick to the code's logic.
Â  Â  Â  if (isPastProject && !p.is_delivered && p.Assigned_date) {
Â  Â  Â  Â  carry_operation += amt;
Â  Â  Â  }

Â  Â  Â  // carry_pm: old project AND not yet assigned
Â  Â  Â  if (isPastProject && !p.Assigned_date) {
Â  Â  Â  Â  carry_pm += amt;
Â  Â  Â  }
//if delivery date is in this month but project from past
      if (isPastProject && !p.is_delivered || isThisMonthDelivery && isPastProject) {
        total_carry += amt;
      }

Â  Â  
Â  Â  });

Â  Â 

Â  Â  const result = {
Â  Â  Â  total_operations,
Â  Â  Â  total_sales,
Â  Â  Â  total_assign,
Â  Â  Â  need_to_assign,
Â  Â  Â  carry_operation,
Â  Â  Â  carry_pm,
Â  Â  Â  total_carry, // This is the sum of carry_operation and carry_pm
Â  Â  Â  cancelled,
Â  Â  };

Â  Â  io.emit('projectMoneyMetrics', result);
Â  Â  console.log('ðŸ“Š Project Money Metrics (Updated):', result);

Â  } catch (error) {
Â  Â  console.error('[Money Metrics] Failed:', error);
Â  }
}

module.exports = emitProjectMoneyMetrics;