generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model project {
  id                   Int           @id @default(autoincrement())
  order_id             String?
  date                 DateTime?     @db.Date
  project_name         String?       @unique @db.VarChar(200)
  ops_status           String?
  sales_comments       String?
  opsleader_comments   String?
  sheet_link           String?
  ordered_by           Int
  deli_last_date       DateTime?     @db.Date
  status               String?
  order_amount         Decimal?      @db.Decimal(65, 0)
  after_fiverr_amount  Decimal?
  bonus                Decimal?      @db.Decimal(65, 0)
  after_Fiverr_bonus   Decimal?      @db.Decimal(65, 0)
  rating               Int?
  department_id        Int
  project_requirements String?
  profile_id           Int?
  team_id              Int?
  Assigned_date        DateTime?     @db.Date
  extension            Int?
  is_delivered         Boolean?      @default(false)
  revision             Int?
  delivery_date        DateTime?     @db.Date
  update_at            DateTime?     @db.Date
  branch               branch?
  department           department    @relation(fields: [department_id], references: [id], onDelete: Cascade)
  team_member          team_member   @relation(fields: [ordered_by], references: [id])
  profile              profile?      @relation(fields: [profile_id], references: [id])
  team                 team?         @relation(fields: [team_id], references: [id])
  today_task           today_task[]
  team_members         team_member[] @relation("ProjectAssignments")
  member_distribution  member_distribution[]
}

model team {
  id            Int           @id @default(autoincrement())
  team_name     String?       @unique @db.VarChar(250)
  created_date  DateTime?
  department_id Int
  team_target   Decimal?      @db.Decimal(65, 0)
  project       project[]
  department    department    @relation(fields: [department_id], references: [id], onDelete: Cascade)
  team_member   team_member[]
  today_task    today_task[]
  revision      revision[]    @relation("revisionToteam")
}

model department {
  id                       Int       @id @default(autoincrement())
  department_name          String?   @unique @db.VarChar(200)
  created_date             DateTime?
  department_target        Decimal?  @db.Decimal(65, 0)
  assign_project           project[]
  department_teams         team[]
  department_profile       profile[] @relation("departmentToprofile")
  team_members             team_member[]
}

model profile {
  id             Int           @id @default(autoincrement())
  created_date   DateTime?
  profile_name   String?       @unique
  order_amount   Decimal?      @db.Decimal(65, 0)
  bonus_amount   Decimal?      @db.Decimal(65, 0)
  order_count    Int?
  rank           Decimal?      @db.Decimal(65, 0)
  cancel_count   Int?
  complete_count Int?
  no_rating      Int?
  profile_target Decimal?      @db.Decimal(65, 0)
  department_id  Int?
  repeat_order   Decimal?      @db.Decimal(65, 0)
  total_rating   Decimal?      @db.Decimal(65, 0)
  projects       project[]
  department     department[]  @relation("departmentToprofile")
  team_members   team_member[] @relation("profileToteam_member")
  profile_promotion profile_promotion[]
  profile_ranking profile_ranking[]
  profile_special_order Project_special_order[]
}

model profile_ranking {
  id             Int          @id @default(autoincrement())
  profile_id     Int
  profile        profile      @relation(fields: [profile_id], references: [id])
  keywords       String?
  row          Int?
  ranking_page  String?
  created_date   DateTime?
  update_at      DateTime?
}


model profile_promotion {
  id               Int       @id @default(autoincrement())
  profile_id       Int
  promotion_amount Decimal? @db.Decimal(65, 0)
  actual_increase  Decimal? @db.Decimal(65, 0) // ✅ প্রতিদিন বাড়া অংশ
  clicks           Int?      // ✅ নতুন
  impressions      Int?      // ✅ নতুন
  created_date     DateTime?
  update_at        DateTime?
  profile          profile   @relation(fields: [profile_id], references: [id])
}


model team_member {
  id                  Int                   @id @default(autoincrement())
  first_name          String?
  last_name           String?
  email               String?               @unique @db.VarChar(200)
  number              String?               @db.VarChar(50)
  permanent_address   String?
  present_address     String?
  gender              String?
  blood_group         String?
  relationship        String?
  guardian_relation   String?
  guardian_number     String?
  guardian_address    String?
  team_id             Int?
  religion            String?
  education           String?
  dp                  String?
  role                String?
  target              Decimal?              @db.Decimal(65, 0)
  rating              Decimal?              @db.Decimal(65, 0)
  rewards             Decimal?              @db.Decimal(65, 0)
  account_status      String?               @db.VarChar(50)
  password            String?               @db.VarChar(400)
  designation         String?
  uid                 String?               @unique
  branch             branch?
  member_distribution member_distribution[]
  project             project[]
  team                team?                 @relation(fields: [team_id], references: [id], onDelete: Cascade)
  today_task          today_task[]
  assigned_projects   project[]             @relation("ProjectAssignments")
  profile             profile[]             @relation("profileToteam_member")
  department_id          Int?
  department              department? @relation(fields: [department_id], references: [id], onDelete: Cascade)
}

model member_distribution {
  id             Int          @id @default(autoincrement())
  team_member_id Int
  amount         Decimal?     @db.Decimal(65, 0)
  team_member    team_member  @relation(fields: [team_member_id], references: [id])
  project_id     Int
  project        project      @relation(fields: [project_id], references: [id])

  
}

model revision {
  id                Int       @id @default(autoincrement())
  project_id        Int
  revision_date     DateTime? @db.Date
  revision_comments String?
  delivery_date     DateTime? @db.Date
  metting_link      String?
  metting_date      DateTime? @db.Date
  team              team[]    @relation("revisionToteam")
}

model today_task {
  id                   Int                   @id @default(autoincrement())
  project_id           Int
  client_name          String?
  expected_finish_time String?
  team_id              Int?
  ops_status           String?
  team_member_id       Int?
  project              project               @relation(fields: [project_id], references: [id])
  team                 team?                 @relation(fields: [team_id], references: [id])
  team_member          team_member?          @relation(fields: [team_member_id], references: [id])
}


model anouncement {
  id          Int       @id @default(autoincrement())
 is_done      Boolean?  @default(false)
}





model  Project_special_order {
  id             Int          @id @default(autoincrement())
  profile_id     Int
  profile        profile      @relation(fields: [profile_id], references: [id])
  special_order_amount Decimal?     @db.Decimal(65, 0)
  delivery_date     DateTime? @db.Date
  client_name          String?
  created_date   DateTime?
  update_at      DateTime?
}


enum branch {
  Jamuna_branch
  Banasree_branch
}
